import numpy as np
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.optimizers import Adam
import os
import matplotlib.pyplot as plt


def train_attack_model(shadow_models, x_train, y_train, x_test, y_test, results_dir, 
                       data_size=10000, nh=5, lrate=0.001, decay=1e-7, batch_size=32, epochs=100):
    """
    Train the attack model using predictions from shadow models.

    Parameters:
        shadow_models (list): List of trained shadow models.
        x_train (np.ndarray): Input features for training.
        y_train (np.ndarray): True labels for training.
        x_test (np.ndarray): Input features for testing.
        y_test (np.ndarray): True labels for testing.
        results_dir (str): Directory to save the attack model and results.
        data_size (int): Number of samples used for each shadow model.
        nh (int): Number of hidden layers.
        lrate (float): Learning rate.
        decay (float): Learning rate decay.
        batch_size (int): Batch size.
        epochs (int): Number of epochs for training.

    Returns:
        model_attack (Sequential): Trained attack model.
        history (History): Training history of the attack model.
    """
    print("Preparing attack model training data...")
    
    # Load the attack training data generated by shadow models
    attack_data_path = os.path.join(results_dir, f'att_train_data_{data_size}.npy')
    attack_data = np.load(attack_data_path, allow_pickle=True).item()
    xtr_att = attack_data['xtr_att']
    ytr_att = attack_data['ytr_att']

    # Prepare testing data from the target model
    ytemp_tr_target = shadow_models[0].predict(x_train)
    ytemp_ts_target = shadow_models[0].predict(x_test)
    xts_att = np.vstack((ytemp_tr_target, ytemp_ts_target))
    yts_att = np.zeros((2 * data_size, 1))
    yts_att[data_size:2 * data_size] = 1

    print(f"Attack training data shape: {xtr_att.shape}")
    print(f"Attack training labels shape: {ytr_att.shape}")
    print(f"Attack testing data shape: {xts_att.shape}")
    print(f"Attack testing labels shape: {yts_att.shape}")

    
    print("Building attack model...")
    model_attack = Sequential([
        Dense(nh, input_shape=(xtr_att.shape[1],), activation='sigmoid', name='hidden'),
        Dense(1, activation='sigmoid', name='output')
    ])
    opt = Adam(learning_rate=lrate, decay=decay)
    model_attack.compile(loss='binary_crossentropy', optimizer=opt, metrics=['accuracy'])

    
    print("Training attack model...")
    history = model_attack.fit(
        xtr_att, ytr_att,
        batch_size=batch_size,
        epochs=epochs,
        validation_data=(xts_att, yts_att),
        shuffle=True,
        verbose=1
    )

   
    attack_model_name = os.path.join(results_dir, f'attack_model_{data_size}.h5')
    model_attack.save(attack_model_name)
    print(f"Attack model saved at {attack_model_name}")

    
    plt.figure(figsize=(12, 6))
    plt.plot(history.history['accuracy'], label='Train Accuracy')
    plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
    plt.title('Attack Model Training Accuracy')
    plt.xlabel('Epochs')
    plt.ylabel('Accuracy')
    plt.legend()
    plt.grid(True)
    plt.savefig(os.path.join(results_dir, 'attack_model_training.png'))
    plt.close()
    
    
    print(f"Final Training Accuracy: {history.history['accuracy'][-1]:.4f}")
    print(f"Final Validation Accuracy: {history.history['val_accuracy'][-1]:.4f}")

    return model_attack, history
